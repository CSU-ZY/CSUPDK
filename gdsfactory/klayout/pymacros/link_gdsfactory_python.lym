<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <description>0_link_gdsfactory_python</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>gdsfactory.begin</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import pya
import sys
import json
import importlib
from pathlib import Path

python_base_dir = pya.FileDialog.ask_existing_dir("Select directory of Python environment to link:", "")

import_packages = [
    'click',
    'flatdict',
    'gdspy',
    'jsondiff',
    'loguru',
    'lxml',
    'matplotlib',
    'numpy',
    'omegaconf',
    'orjson',
    'pandas',
    'pydantic',
    'pytest',
    'pytest-regressions',
    'pyyaml',
    'qrcode',
    'rectpack',
    'scipy',
    'shapely',
    'toolz',
    'tqdm',
    'types-PyYAML',
    'typing_extensions',
    'watchdog',
    'xmltodict',
    'gdsfactory',
    'flayout'
]

external_site_packages = list(Path(python_base_dir).glob("**/site-packages"))

if len(external_site_packages) > 1 or len(external_site_packages) == 0:
    raise ImportError("The specified directory should contain exactly one 'site-packages' folder.")

python_lib_path = external_site_packages[0]

# Add path to import all extra modules
sys.path.append(str(python_lib_path))

for package in import_packages:
  package_info_dir =  list(python_lib_path.glob(f"{package}-*dist-info*"))

  if len(package_info_dir) == 0:
    continue

  if len(package_info_dir) > 1:
    print(f"Multiple info directories for {package} found! :\n{package_info_dir}")
    continue

  package_info_file = package_info_dir[0] / "direct_url.json"

  if not package_info_file.exists():
    continue

  with open(package_info_file, 'r') as f:
    # Should be in format: "file:///path/to/local/package"
    try:
        package_import_path = json.load(f)["url"][7:]
        print("found package: ", package_import_path)
    except Exception as err:
        print(err)

  if package_import_path not in sys.path:
    sys.path.append(package_import_path)

  # importlib.import_module(package)

# sys.path.remove(package_import_path)

</text>
</klayout-macro>
